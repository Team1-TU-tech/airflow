x-airflow-common:
  &airflow-common
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.3}
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'false'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    - kafka1
    - kafka2
    - kafka3
    - redis
    - postgres
  networks:
    - kafka-network 

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    restart: always
    networks:
      - kafka-network  

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    restart: always
    networks:
      - kafka-network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    env_file:
      - .env
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - airflow-init
    networks:
      - kafka-network
    
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - airflow-init
    networks:
      - kafka-network

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    environment:
      <<: *airflow-common-env
      GOOGLE_CHROME_BIN: "/usr/bin/google-chrome"
      CHROMEDRIVER_PATH: "/usr/local/bin/chromedriver"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      DUMB_INIT_SETSID: "0"
      LINE_TOKEN: ${LINE_TOKEN}
    restart: always
    env_file:
      - .env
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - airflow-init
    deploy:
      resources:
        limits:
          memory: 6g
          cpus: "4.0"
    networks:
      - kafka-network
          
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    restart: always
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - airflow-init
    networks:
      - kafka-network

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        airflow db init &&
        airflow users create \
          --username ${AIRFLOW_WWW_USER_USERNAME} \
          --password ${AIRFLOW_WWW_USER_PASSWORD} \
          --firstname ${AIRFLOW_WWW_USER_FIRSTNAME} \
          --lastname ${AIRFLOW_WWW_USER_LASTNAME} \
          --role Admin \
          --email ${AIRFLOW_WWW_USER_EMAIL} &&
          echo "Airflow Initialized"
    env_file:
      - .env
    environment:
      <<: *airflow-common-env
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - kafka-network

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    restart: always
    depends_on:
      - airflow-init
    networks:
      - kafka-network

  # Kafka Broker 1
  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    ports:
      - "9093:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://59.13.34.131:9093
      KAFKA_LISTENER_NAMES: PLAINTEXT
      KAFKA_LISTENER_PORT: 9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_HOST_NAME: kafka1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    restart: always
    networks:
      - kafka-network


  # Kafka Broker 2
  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    ports:
      - "9094:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://59.13.34.131:9094
      KAFKA_LISTENER_NAMES: PLAINTEXT
      KAFKA_LISTENER_PORT: 9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_HOST_NAME: kafka2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    restart: always
    networks:
      - kafka-network


  # Kafka Broker 3
  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka3
    ports:
      - "9095:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://59.13.34.131:9095
      KAFKA_LISTENER_NAMES: PLAINTEXT
      KAFKA_LISTENER_PORT: 9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_HOST_NAME: kafka3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    restart: always
    networks:
      - kafka-network


  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
    networks:
      - kafka-network



volumes:
  postgres-db-volume:

networks:
  kafka-network:
    driver: bridge
