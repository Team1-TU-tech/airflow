x-airflow-common-env: &airflow-common-env
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__CORE__FERNET_KEY: ""
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://airflow:airflow@postgres/airflow"
  AIRFLOW__CELERY__BROKER_URL: "redis://redis:6379/0"
  AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://airflow:airflow@postgres/airflow"
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
  AIRFLOW__WEBSERVER__DEFAULT_USER: "true"

x-airflow-common-volumes: &airflow-common-volumes
  - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
  - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
  - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
  - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins

services:
  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.10.3
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    depends_on:
      - airflow-init
      - airflow-scheduler
      - airflow-worker
      - kafka
      - postgres
    environment:
      <<: *airflow-common-env
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    restart: always
    command: webserver
    networks:
      - airflow_network

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.10.3
    container_name: airflow-scheduler
    depends_on:
      - airflow-init
      - kafka
    environment:
      <<: *airflow-common-env
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    restart: always
    command: scheduler
    networks:
      - airflow_network

  # Airflow Worker
  airflow-worker:
    build: .
    container_name: airflow-worker
    depends_on:
      - airflow-init
      - kafka
    environment:
      <<: *airflow-common-env
      GOOGLE_CHROME_BIN: "/usr/bin/google-chrome"
      CHROMEDRIVER_PATH: "/usr/local/bin/chromedriver"
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION

    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    restart: always
    networks:
      - airflow_network
    command: celery worker
    deploy:
      resources:
        limits:
          memory: 4g
          cpus: "2.0"

  # Airflow Triggerer
  airflow-triggerer:
    image: apache/airflow:2.10.3
    container_name: airflow-triggerer
    depends_on:
      - airflow-init
      - kafka
    environment:
      <<: *airflow-common-env
    restart: always
    command: triggerer
    networks:
      - airflow_network

  # Airflow Database Initialization
  airflow-init:
    image: apache/airflow:2.10.3
    container_name: airflow-init
    environment:
      <<:
        *airflow-common-env
        #AIRFLOW__WEBSERVER__DEFAULT_USER: "true"
    entrypoint: >
      bash -c ""
      airflow db upgrade &&
      airflow users create \
      --username $AIRFLOW_USERNAME \
      --firstname $AIRFLOW_FIRSTNAME \
      --lastname $AIRFLOW_LASTNAME \
      --role Admin \
      --email $AIRFLOW_EMAIL \
      --password $AIRFLOW_PASSWORD &&
      echo 'Airflow Initialization Complete'""
    restart: "no"
    networks:
      - airflow_network

  # Zookeeper 1
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
    networks:
      - airflow_network

  # Zookeeper 2
  zookeeper2:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper2
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
    networks:
      - airflow_network

  # Zookeeper 3
  zookeeper3:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper3
    ports:
      - "2183:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
    networks:
      - airflow_network

  # Kafka Broker 1
  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2 # 설정 추가
    networks:
      - airflow_network

  # Kafka Broker 2
  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2 # 설정 추가
    networks:
      - airflow_network

  # Kafka Broker 3
  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka3
    ports:
      - "9094:9094"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2 # 설정 추가
    networks:
      - airflow_network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9093,kafka3:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper1:2181
    networks:
      - airflow_network

  # Kafka Consumer
  kafka-consumer:
    build: kafka/
    container_name: kafka-consumer
    depends_on:
      - kafka1
    environment:
      S3_BUCKET_NAME: t1-tu-data
    command: python /app/consumer.py
    networks:
      - airflow_network

  # Airflow Metadata Database (PostgreSQL)
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - airflow_network

  # Redis (Celery Backend)
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - airflow_network

volumes:
  postgres-data:

networks:
  airflow_network:
    driver: bridge
